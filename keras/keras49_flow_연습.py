import numpy as np
aaa = np.array([[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]])

print(aaa)
"""
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]
"""

print(aaa.shape)    # (4, 4)
augment_size = 2
bbb = np.tile(aaa, augment_size)
print(bbb)  # 4*4를 옆으로 이어붙인 형태
"""
[[ 0  1  2  3  0  1  2  3]
 [ 4  5  6  7  4  5  6  7]
 [ 8  9 10 11  8  9 10 11]
 [12 13 14 15 12 13 14 15]]
 """
print(bbb.shape)    # (4, 8)
# reshape의 기본작동원리 : 1차원 행방향(order='C') 편다음 순차적으로 shape 작성
# order='C' (reshape 디폴트값): 행단위로 평탄화한다음, 행단위로 읽음
ccc = bbb.reshape(-1, 4, 4, 1)
# 'C'방식 reshape 순서 
# shape가 어떻게 되는지 확인한다. 4*8=32개를 4*4*1=16로 변환해야하므로 batch가 2개가 된다.
# 1. bbb를 행기준으로 1차원으로 flatten한다. [0 1 2 3 0 1 2 3 .... 12 13 14 15 12 13 14 15]
# 2. (2, 4, 4, 1) = (batch, 높이(행), 너비(열), 요소) 행렬을 만들고  뒤에서 부터 채워나간다.

print(ccc)
"""
[[[[ 0]
   [ 1]
   [ 2]
   [ 3]]

  [[ 0]
   [ 1]
   [ 2]
   [ 3]]

  [[ 4]
   [ 5]
   [ 6]
   [ 7]]

  [[ 4]
   [ 5]
   [ 6]
   [ 7]]]


 [[[ 8]
   [ 9]
   [10]
   [11]]

  [[ 8]
   [ 9]
   [10]
   [11]]

  [[12]
   [13]
   [14]
   [15]]

  [[12]
   [13]
   [14]
   [15]]]]
"""
print(ccc.shape)    # (2, 4, 4, 1)

print("=================================")
print(bbb)  # 4*4를 옆으로 이어붙인 형태
"""
[[ 0  1  2  3  0  1  2  3]
 [ 4  5  6  7  4  5  6  7]
 [ 8  9 10 11  8  9 10 11]
 [12 13 14 15 12 13 14 15]]
 """
print(bbb.shape)    # (4, 8)
ccc = bbb.reshape(-1, 4, 4, 1, order='F')
# 'F'방식 reshape 순서 
# shape가 어떻게 되는지 확인한다. 4*8=32개를 4*4*1=16로 변환해야하므로 batch가 2개가 된다.
# 1. bbb를 열기준으로 1차원으로 flatten한다. [0 4 8 12 1 5 9 13 .... 2 6 10 14 3 7 11 15]
# 2. (2, 4, 4, 1) = (batch, 높이(행), 너비(열), 요소) 매트릭스를 만들고 'C'일때와는 반대로 앞에서부터 채워나간다. 즉, batch부터 채워나가기때문에 블록을 왔다갔다한다.

print(ccc)
"""
[[[[ 0]
   [ 2]
   [ 0]
   [ 2]]

  [[ 8]
   [10]
   [ 8]
   [10]]

  [[ 1]
   [ 3]
   [ 1]
   [ 3]]

  [[ 9]
   [11]
   [ 9]
   [11]]]


 [[[ 4]
   [ 6]
   [ 4]
   [ 6]]

  [[12]
   [14]
   [12]
   [14]]

  [[ 5]
   [ 7]
   [ 5]
   [ 7]]

  [[13]
   [15]
   [13]
   [15]]]]
"""

print(ccc.shape)    # (2, 4, 4, 1)